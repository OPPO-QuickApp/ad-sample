
<template>
  <div class="ad-wrap">
    <text class="btn" onclick="reload">重新加载广告</text>
    <div class="nativeAdContainer" if="{{ showAd }}">
      <ad
        adunitid="{{ adunitid }}"
        class="ad-native"
        type="native"
        onload="adLoad(evt)"
        onerror="adError(err,evt)"
        onadclick="adClick"
        onadshow="adShow"
        onvideostart="videoStart"
        onvideoend="videoEnd"
      >
        <ad-clickable-area type="video" class="ad-content"> </ad-clickable-area>
      </ad>
    </div>

    <div class="page-title-wrap">
      <text class="page-title">日志</text>
    </div>
    <div class="item-container">
      <text class="item-content" for="(logIndex, log) in logs">
        <span class="txt">- {{ log }}</span></text
      >
    </div>
    <div class="bottomPlaceHolder"></div>
  </div>
</template>
<script>
import prompt from '@system.prompt'
import ad from '@service.ad'
import device from '@system.device'
// JS部分请尽量按照广告示例demo编写
export default {
  data: {
    showAd: true,
    adunitid: 750365,
    adData: { // 此处广告的初始值需严格按照文档来
      imgUrlList: [],
      title: '',
      desc: '',
      clickBtnTxt: ''
    },
    platformVersionCode: '',
    logs: []

  },
  async onInit() {
    this.platformVersionCode = await this.getDeviceInfo('platformVersionCode')

    if (this.platformVersionCode >= 1114) {
      this.adPreloaded()
    }
    else {
      prompt.showToast({
        message: `当前引擎不支持原生自渲染2.0视频广告，请升级最新引擎`
      })
      console.log('引擎版本: ', this.platformVersionCode)
      this.logs.unshift(`引擎版本: ${this.platformVersionCode}`)
      this.logs.unshift(`当前引擎不支持原生自渲染2.0视频广告，请升级最新引擎`)
    }
  },
  adPreloaded() {
    ad.preloadAd({
      adUnitId: this.adunitid,
      type: 'native',
      success: (data) => {
        console.log(data, '预加载成功')
        prompt.showToast({
          message: `预加载成功${JSON.stringify(data)}`
        })
        this.logs.unshift(`预加载成功: ${JSON.stringify(data)}`)
      },
      fail: function (err, code) {
        console.log(err, code, '预加载失败')
        prompt.showToast({
          message: `预加载失败${JSON.stringify(err)}`
        })
        this.logs.unshift(`预加载失败:${JSON.stringify(err)}`)
      }
    })
  },
  adLoad(evt) {
    if (evt && evt.adData) {
      const adData = JSON.parse(evt.adData)
      this.adData = adData
      prompt.showToast({
        message: '信息流广告展示成功'
      })
      console.log('adLoad', adData, '信息流广告加载成功');
      this.logs.unshift(`信息流广告加载成功: ${JSON.stringify(adData)}`)
    }
  },
  adError(err, evt) {
    if (err) {
      console.log('adError 信息流广告加载出错：', err)
    } else if (evt) {
      prompt.showToast({
        message: '信息流广告展示失败:' + evt.errCode + ', errMsg=' + evt.errMsg
      })
      console.log('adError 信息流广告展示失败：', evt.errCode, evt.errMsg)
      this.logs.unshift(`信息流广告展示失败：: ${evt.errCode},${evt.errMsg}`)
    }
  },
  adShow(evt) {
    console.log('adShow: ', evt)

    prompt.showToast({
      message: `广告展示回调事件成功触发`
    })
    this.logs.unshift(`广告展示回调事件成功触发`)
  },
  adClick(evt) {
    console.log('adClick: ', evt)

    prompt.showToast({
      message: `广告点击回调事件成功触发`
    })
    this.logs.unshift(`广告点击回调事件成功触发`)
  },
  reload() {
    // 可通过 if 先销毁原广告组件，再重新创建广告组件，达到重新加载的效果
    this.showAd = false
    setTimeout(() => {
      this.adData = {
        imgUrlList: [],
        title: '',
        desc: '',
        clickBtnTxt: ''
      }
      this.showAd = true
    }, 500)
  },
  onclose() {
    this.showAd = false
  },
  videoStart() {
    prompt.showToast({
      message: `视频广告videoStart回调事件成功触发`
    })
    this.logs.unshift(`视频广告videoStart回调`)
  },
  videoEnd() {
    prompt.showToast({
      message: `视频广告videoEnd回调事件成功触发`
    })
    this.logs.unshift(`视频广告videoEnd回调`)
  },
  // 获取设备信息
  getDeviceInfo(key) {
    return new Promise((resolve, reject) => {
      device.getInfo({
        success: function (data) {
          if (key) {
            resolve(data[key])
          } else {
            resolve(data)
          }
        },
        fail: function (data, code) {
          reject(`### device.getInfo fail ### ${code}: ${data}`)
        }
      })
    })
  }
}
</script>
<style lang="less">
.ad-wrap {
  flex: 1;
  flex-direction: column;
}

.btn {
  height: 86px;
  border: 1px solid #333;
  padding: 20px;
}

.nativeAdContainer {
  height: 450px;
  flex-direction: column;
  margin-bottom: 20px;
}

.ad-native {
  background-color: lightgray;
  width: 100%;
  height: 450px;
  position: relative;

  .ad-content {
    width: 100%;
    height: 450px;
  }
  .ad-close {
    width: 50px;
    height: 30px;
    background-color: gray;
    opacity: 0.5;
    position: absolute;
    margin-left: 700px;
    text {
      font-size: 20px;
      padding: 5px;
      color: #ffffff;
    }
  }
}

.page-title-wrap {
  justify-content: center;
}
.page-title {
  padding-top: 30px;
  padding-bottom: 30px;
  padding-left: 40px;
  padding-right: 40px;
  border-color: #bbbbbb;
  color: #bbbbbb;
  border-bottom-width: 2px;
}

.item-container {
  margin-bottom: 50px;
  margin-right: 60px;
  margin-left: 60px;
  flex-direction: column;
}
.item-content {
  flex-direction: column;
  background-color: #ffffff;
  padding: 30px;
  margin-bottom: 30px;
}
</style>