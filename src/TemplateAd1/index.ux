<!-- ad.preloadAd预加载方式加载 引擎版本号1112+支持 -->
<template>
  <div class="ad-wrap">
    <block for="{{ adItem in adData}}">
      <div class="nativeAdContainer" if="{{ adItem.showAd }}">
        <ad-custom
          id="ad-custom"
          class="ad-native"
          adid="{{ adItem.adId }}"
          onerror="adError(err,evt)"
          onload="adLoad"
          onclick="adClick"
          onclose="adClose(adItem.adId)"
          onshow="adShow"
        >
        </ad-custom>
      </div>
    </block>

    <div class="item-container">
      <div class="item-content">
        <input type="button" class="btn1" onclick="getECPM" value="获取竞价" />
        <input
          type="button"
          class="btn1"
          onclick="btnNotifyRankWin"
          value="通知竞价成功"
        />
        <input
          type="button"
          class="btn1"
          onclick="btnNotifyRankLoss"
          value="通知竞价失败"
        />
        <input
          type="button"
          class="btn1"
          onclick="btnSetBidECPM"
          value="设置实际结算价"
        />

        <input
          type="button"
          class="btn1"
          onclick="btnLoadAd"
          value="加载广告"
        />
      </div>
    </div>
    <div class="page-title-wrap">
      <text class="page-title">日志</text>
    </div>
    <div class="item-container">
      <text class="item-content" for="(logIndex, log) in logs">
        <span class="txt">- {{ log }}</span></text
      >
    </div>
    <div class="bottomPlaceHolder"></div>
  </div>
</template>
<script>
import prompt from '@system.prompt'
import ad from '@service.ad'
import device from '@system.device'
export default {
  data: {
    adunitid: 683318,
    platformVersionCode: '',
    preloadData: [],
    adData: [],
    showAd: false,
    logs: []
  },
  async onInit() {
    this.platformVersionCode = await this.getDeviceInfo('platformVersionCode')
    console.log(this.platformVersionCode);
    if (this.platformVersionCode >= 1112) {
      this.adPreloaded()
    }
    else {
      prompt.showToast({
        message: `当前引擎不支持模板广告，请升级最新引擎`
      })
      console.log('引擎版本: ', this.platformVersionCode)
      this.logs.unshift(`引擎版本: ${this.platformVersionCode}`)
    }
  },
  adPreloaded() {
    ad.preloadAd({
      adUnitId: this.adunitid,
      ecpm: true,
      type: 'custom',
      adCount: 3,
      success: (data) => {
        if (this.platformVersionCode >= 1118) {
          //存储预加载数据
          this.preloadData = data.adList
        }
        prompt.showToast({
          message: `预加载成功`
        })
        this.logs.unshift(`预加载成功:${JSON.stringify(data)}`)
      },
      fail: (err, code) => {
        console.log(err, code, '预加载失败')
        prompt.showToast({
          message: `预加载失败${JSON.stringify(err)}`
        })
        this.logs.unshift(`预加载失败：${JSON.stringify(err)}`)
      }
    })
  },
  btnNotifyRankWin() {
    this.logs.unshift(`点击通知竞价成功接口`)
    if (this.preloadData.length > 0) {
      let adid = this.preloadData[0].adId
      this.logs.unshift(`adid:${adid}`)
      const data = ad.notifyRankWin({
        adid: adid,
        lossPrice: 1000
      })
      this.logs.unshift(`通知竞价成功接口正常返回:${JSON.stringify(data)}`)
    }
  },
  btnNotifyRankLoss() {
    this.logs.unshift(`点击通知竞价失败接口`)
    if (this.preloadData.length > 0) {
      let adid = this.preloadData[0].adId
      this.logs.unshift(`adid:${adid}`)
      const data = ad.notifyRankLoss({
        adid: adid,
        winPrice: 1000,
        code: 1,//可传 1,2,3,4
        channel: 'mob'//可传mob,other,其他自定义值
      })

      this.logs.unshift(`通知竞价失败接口正常返回:${JSON.stringify(data)}`)
    }
  },
  btnSetBidECPM() {
    this.logs.unshift(`设置实际结算价接口`)
    if (this.preloadData.length > 0) {
      let adid = this.preloadData[0].adId
      this.logs.unshift(`adid:${adid}`)
      const data = ad.setBidECPM({
        adid: adid,
        ecpm: 1000
      })
      this.logs.unshift(`设置实际结算价接口正常返回:${JSON.stringify(data)}`)
    }
  },
  adLoad() {
    console.log('adLoad 模板广告加载成功')
    this.logs.unshift(`adLoad 模板广告加载成功`)
  },
  btnLoadAd() {
    //置空，便于重新加载广告
    this.adData = []
    //深拷贝，否则会影响对象改变后，无法触发UI渲染
    let result = JSON.parse(JSON.stringify(this.preloadData))
    //处理单条广告，是否显示
    this.adData = result.map((ele) => {
      ele.showAd = true
      return ele
    })
    this.logs.unshift(`广告数据：${JSON.stringify(this.adData)}`)

  },
  adError(err, evt) {
    if (err) {
      console.log('adError  模板广告加载出错：', err)
      this.logs.unshift(`adError 模板广告加载出错：${JSON.stringify(err)}`)
    } else if (evt) {
      prompt.showToast({
        message: '模板广告展示失败:' + evt.errCode + ', errMsg=' + evt.errMsg
      })
      console.log('adError 模板广告展示失败：', evt.errCode, evt.errMsg)
      this.logs.unshift(`adError 模板广告展示失败：code:${evt.errCode},msg:${evt.errMsg}`)
    }
  },
  adShow(evt) {
    console.log('adShow: 模板广告展示回调事件成功触发')
    prompt.showToast({
      message: `模板广告展示回调事件成功触发`
    })
    this.logs.unshift(`adShow: 模板广告展示回调事件成功触发`)
  },
  adClick(evt) {
    console.log('adClick: 模板广告点击回调事件成功触发')
    prompt.showToast({
      message: `模板广告点击回调事件成功触发`
    })
    this.logs.unshift(`adClick: 模板广告点击回调事件成功触发`)
  },
  adClose(adId) {
    this.adData.forEach(ele => {
      if (ele.adId === adId) {
        ele.showAd = false
        this.logs.unshift(`关闭广告。adid:${adId}`)
      }
    })

    console.log('adClose: 模板广告关闭回调事件成功触发')
    prompt.showToast({
      message: `模板广告关闭回调事件成功触发`
    })
    this.logs.unshift(`adClose: 模板广告关闭回调事件成功触发`)
  },
  getECPM() {
    this.$element('ad-custom').getECPM({
      success: (data) => {
        this.logs.unshift(`getECPM: 获取实时竞价结果成功,${JSON.stringify(data)}`)
      },
      fail: (data) => {
        this.logs.unshift(`getECPM: 获取实时竞价结果失败,${JSON.stringify(data)}`)
      }
    })
  },
  // 获取设备信息
  getDeviceInfo(key) {
    return new Promise((resolve, reject) => {
      device.getInfo({
        success: function (data) {
          if (key) {
            resolve(data[key])
          } else {
            resolve(data)
          }
        },
        fail: function (data, code) {
          reject(`### device.getInfo fail ### ${code}: ${data}`)
        }
      })
    })
  }
}
</script>
<style lang="less">
.ad-wrap {
  flex: 1;
  flex-direction: column;
}

.nativeAdContainer {
  width: 750px;
  height: 650px;
  flex-direction: column;
  margin-bottom: 20px;
}

.ad-native {
  width: 100%;
  height: 650px;
}

.page-title-wrap {
  justify-content: center;
}
.page-title {
  padding-top: 30px;
  padding-bottom: 30px;
  padding-left: 40px;
  padding-right: 40px;
  border-color: #bbbbbb;
  color: #bbbbbb;
  border-bottom-width: 2px;
}

.btn1 {
  height: 86px;
  margin-top: 75px;
  background-color: #09ba07;
  font-size: 30px;
  color: #ffffff;
  padding-left: 20px;
  padding-right: 20px;
}

.item-container {
  margin-bottom: 50px;
  margin-right: 60px;
  margin-left: 60px;
  flex-direction: column;
}
.item-content {
  flex-direction: column;
  background-color: #ffffff;
  padding: 30px;
  margin-bottom: 30px;
}
</style>